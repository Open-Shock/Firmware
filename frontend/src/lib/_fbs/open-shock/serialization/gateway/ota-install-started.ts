// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SemVer } from '../../../open-shock/serialization/types/sem-ver';


export class OtaInstallStarted {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OtaInstallStarted {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOtaInstallStarted(bb:flatbuffers.ByteBuffer, obj?:OtaInstallStarted):OtaInstallStarted {
  return (obj || new OtaInstallStarted()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOtaInstallStarted(bb:flatbuffers.ByteBuffer, obj?:OtaInstallStarted):OtaInstallStarted {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OtaInstallStarted()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

version(obj?:SemVer):SemVer|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new SemVer()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startOtaInstallStarted(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addVersion(builder:flatbuffers.Builder, versionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, versionOffset, 0);
}

static endOtaInstallStarted(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createOtaInstallStarted(builder:flatbuffers.Builder, versionOffset:flatbuffers.Offset):flatbuffers.Offset {
  OtaInstallStarted.startOtaInstallStarted(builder);
  OtaInstallStarted.addVersion(builder, versionOffset);
  return OtaInstallStarted.endOtaInstallStarted(builder);
}
}
