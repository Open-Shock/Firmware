// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { TriggerType } from '../../../open-shock/serialization/gateway/trigger-type';


export class Trigger {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Trigger {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrigger(bb:flatbuffers.ByteBuffer, obj?:Trigger):Trigger {
  return (obj || new Trigger()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrigger(bb:flatbuffers.ByteBuffer, obj?:Trigger):Trigger {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Trigger()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():TriggerType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : TriggerType.Restart;
}

static startTrigger(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addType(builder:flatbuffers.Builder, type:TriggerType) {
  builder.addFieldInt8(0, type, TriggerType.Restart);
}

static endTrigger(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTrigger(builder:flatbuffers.Builder, type:TriggerType):flatbuffers.Offset {
  Trigger.startTrigger(builder);
  Trigger.addType(builder, type);
  return Trigger.endTrigger(builder);
}
}
