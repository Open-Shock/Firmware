// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SemVer } from '../../../open-shock/serialization/types/sem-ver';


export class OtaUpdateRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OtaUpdateRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOtaUpdateRequest(bb:flatbuffers.ByteBuffer, obj?:OtaUpdateRequest):OtaUpdateRequest {
  return (obj || new OtaUpdateRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOtaUpdateRequest(bb:flatbuffers.ByteBuffer, obj?:OtaUpdateRequest):OtaUpdateRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OtaUpdateRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

version(obj?:SemVer):SemVer|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new SemVer()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startOtaUpdateRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addVersion(builder:flatbuffers.Builder, versionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, versionOffset, 0);
}

static endOtaUpdateRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // version
  return offset;
}

static createOtaUpdateRequest(builder:flatbuffers.Builder, versionOffset:flatbuffers.Offset):flatbuffers.Offset {
  OtaUpdateRequest.startOtaUpdateRequest(builder);
  OtaUpdateRequest.addVersion(builder, versionOffset);
  return OtaUpdateRequest.endOtaUpdateRequest(builder);
}
}
