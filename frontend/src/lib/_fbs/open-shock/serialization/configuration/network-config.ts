// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class NetworkConfig {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NetworkConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNetworkConfig(bb:flatbuffers.ByteBuffer, obj?:NetworkConfig):NetworkConfig {
  return (obj || new NetworkConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNetworkConfig(bb:flatbuffers.ByteBuffer, obj?:NetworkConfig):NetworkConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NetworkConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * The primary DNS server
 */
dnsPrimary():string|null
dnsPrimary(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dnsPrimary(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The secondary DNS server
 */
dnsSecondary():string|null
dnsSecondary(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dnsSecondary(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The fallback DNS server (used if the primary and secondary DNS servers fail)
 */
dnsFallback():string|null
dnsFallback(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dnsFallback(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startNetworkConfig(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addDnsPrimary(builder:flatbuffers.Builder, dnsPrimaryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dnsPrimaryOffset, 0);
}

static addDnsSecondary(builder:flatbuffers.Builder, dnsSecondaryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dnsSecondaryOffset, 0);
}

static addDnsFallback(builder:flatbuffers.Builder, dnsFallbackOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, dnsFallbackOffset, 0);
}

static endNetworkConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createNetworkConfig(builder:flatbuffers.Builder, dnsPrimaryOffset:flatbuffers.Offset, dnsSecondaryOffset:flatbuffers.Offset, dnsFallbackOffset:flatbuffers.Offset):flatbuffers.Offset {
  NetworkConfig.startNetworkConfig(builder);
  NetworkConfig.addDnsPrimary(builder, dnsPrimaryOffset);
  NetworkConfig.addDnsSecondary(builder, dnsSecondaryOffset);
  NetworkConfig.addDnsFallback(builder, dnsFallbackOffset);
  return NetworkConfig.endNetworkConfig(builder);
}
}
