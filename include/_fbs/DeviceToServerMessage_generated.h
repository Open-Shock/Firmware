// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DEVICETOSERVERMESSAGE_OPENSHOCK_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_DEVICETOSERVERMESSAGE_OPENSHOCK_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "OtaDownloadResultType_generated.h"
#include "OtaInstallResultType_generated.h"

namespace OpenShock {
namespace Serialization {

struct KeepAlive;

struct OtaDownloadResult;

struct OtaInstallResult;

struct DeviceToServerMessage;
struct DeviceToServerMessageBuilder;

enum class DeviceToServerMessagePayload : uint8_t {
  NONE = 0,
  KeepAlive = 1,
  OtaDownloadResult = 2,
  OtaInstallResult = 3,
  MIN = NONE,
  MAX = OtaInstallResult
};

inline const DeviceToServerMessagePayload (&EnumValuesDeviceToServerMessagePayload())[4] {
  static const DeviceToServerMessagePayload values[] = {
    DeviceToServerMessagePayload::NONE,
    DeviceToServerMessagePayload::KeepAlive,
    DeviceToServerMessagePayload::OtaDownloadResult,
    DeviceToServerMessagePayload::OtaInstallResult
  };
  return values;
}

inline const char * const *EnumNamesDeviceToServerMessagePayload() {
  static const char * const names[5] = {
    "NONE",
    "KeepAlive",
    "OtaDownloadResult",
    "OtaInstallResult",
    nullptr
  };
  return names;
}

inline const char *EnumNameDeviceToServerMessagePayload(DeviceToServerMessagePayload e) {
  if (::flatbuffers::IsOutRange(e, DeviceToServerMessagePayload::NONE, DeviceToServerMessagePayload::OtaInstallResult)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDeviceToServerMessagePayload()[index];
}

template<typename T> struct DeviceToServerMessagePayloadTraits {
  static const DeviceToServerMessagePayload enum_value = DeviceToServerMessagePayload::NONE;
};

template<> struct DeviceToServerMessagePayloadTraits<OpenShock::Serialization::KeepAlive> {
  static const DeviceToServerMessagePayload enum_value = DeviceToServerMessagePayload::KeepAlive;
};

template<> struct DeviceToServerMessagePayloadTraits<OpenShock::Serialization::OtaDownloadResult> {
  static const DeviceToServerMessagePayload enum_value = DeviceToServerMessagePayload::OtaDownloadResult;
};

template<> struct DeviceToServerMessagePayloadTraits<OpenShock::Serialization::OtaInstallResult> {
  static const DeviceToServerMessagePayload enum_value = DeviceToServerMessagePayload::OtaInstallResult;
};

bool VerifyDeviceToServerMessagePayload(::flatbuffers::Verifier &verifier, const void *obj, DeviceToServerMessagePayload type);
bool VerifyDeviceToServerMessagePayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<DeviceToServerMessagePayload> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) KeepAlive FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t uptime_;

 public:
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.KeepAlive";
  }
  KeepAlive()
      : uptime_(0) {
  }
  KeepAlive(uint64_t _uptime)
      : uptime_(::flatbuffers::EndianScalar(_uptime)) {
  }
  uint64_t uptime() const {
    return ::flatbuffers::EndianScalar(uptime_);
  }
};
FLATBUFFERS_STRUCT_END(KeepAlive, 8);

struct KeepAlive::Traits {
  using type = KeepAlive;
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) OtaDownloadResult FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t result_;

 public:
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.OtaDownloadResult";
  }
  OtaDownloadResult()
      : result_(0) {
  }
  OtaDownloadResult(OpenShock::OtaDownloadResultType _result)
      : result_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_result))) {
  }
  OpenShock::OtaDownloadResultType result() const {
    return static_cast<OpenShock::OtaDownloadResultType>(::flatbuffers::EndianScalar(result_));
  }
};
FLATBUFFERS_STRUCT_END(OtaDownloadResult, 1);

struct OtaDownloadResult::Traits {
  using type = OtaDownloadResult;
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) OtaInstallResult FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t result_;

 public:
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.OtaInstallResult";
  }
  OtaInstallResult()
      : result_(0) {
  }
  OtaInstallResult(OpenShock::OtaInstallResultType _result)
      : result_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_result))) {
  }
  OpenShock::OtaInstallResultType result() const {
    return static_cast<OpenShock::OtaInstallResultType>(::flatbuffers::EndianScalar(result_));
  }
};
FLATBUFFERS_STRUCT_END(OtaInstallResult, 1);

struct OtaInstallResult::Traits {
  using type = OtaInstallResult;
};

struct DeviceToServerMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DeviceToServerMessageBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.DeviceToServerMessage";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD_TYPE = 4,
    VT_PAYLOAD = 6
  };
  OpenShock::Serialization::DeviceToServerMessagePayload payload_type() const {
    return static_cast<OpenShock::Serialization::DeviceToServerMessagePayload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const OpenShock::Serialization::KeepAlive *payload_as_KeepAlive() const {
    return payload_type() == OpenShock::Serialization::DeviceToServerMessagePayload::KeepAlive ? static_cast<const OpenShock::Serialization::KeepAlive *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::OtaDownloadResult *payload_as_OtaDownloadResult() const {
    return payload_type() == OpenShock::Serialization::DeviceToServerMessagePayload::OtaDownloadResult ? static_cast<const OpenShock::Serialization::OtaDownloadResult *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::OtaInstallResult *payload_as_OtaInstallResult() const {
    return payload_type() == OpenShock::Serialization::DeviceToServerMessagePayload::OtaInstallResult ? static_cast<const OpenShock::Serialization::OtaInstallResult *>(payload()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyDeviceToServerMessagePayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const OpenShock::Serialization::KeepAlive *DeviceToServerMessage::payload_as<OpenShock::Serialization::KeepAlive>() const {
  return payload_as_KeepAlive();
}

template<> inline const OpenShock::Serialization::OtaDownloadResult *DeviceToServerMessage::payload_as<OpenShock::Serialization::OtaDownloadResult>() const {
  return payload_as_OtaDownloadResult();
}

template<> inline const OpenShock::Serialization::OtaInstallResult *DeviceToServerMessage::payload_as<OpenShock::Serialization::OtaInstallResult>() const {
  return payload_as_OtaInstallResult();
}

struct DeviceToServerMessageBuilder {
  typedef DeviceToServerMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_payload_type(OpenShock::Serialization::DeviceToServerMessagePayload payload_type) {
    fbb_.AddElement<uint8_t>(DeviceToServerMessage::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(DeviceToServerMessage::VT_PAYLOAD, payload);
  }
  explicit DeviceToServerMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DeviceToServerMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DeviceToServerMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DeviceToServerMessage> CreateDeviceToServerMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    OpenShock::Serialization::DeviceToServerMessagePayload payload_type = OpenShock::Serialization::DeviceToServerMessagePayload::NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  DeviceToServerMessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

struct DeviceToServerMessage::Traits {
  using type = DeviceToServerMessage;
  static auto constexpr Create = CreateDeviceToServerMessage;
};

inline bool VerifyDeviceToServerMessagePayload(::flatbuffers::Verifier &verifier, const void *obj, DeviceToServerMessagePayload type) {
  switch (type) {
    case DeviceToServerMessagePayload::NONE: {
      return true;
    }
    case DeviceToServerMessagePayload::KeepAlive: {
      return verifier.VerifyField<OpenShock::Serialization::KeepAlive>(static_cast<const uint8_t *>(obj), 0, 8);
    }
    case DeviceToServerMessagePayload::OtaDownloadResult: {
      return verifier.VerifyField<OpenShock::Serialization::OtaDownloadResult>(static_cast<const uint8_t *>(obj), 0, 1);
    }
    case DeviceToServerMessagePayload::OtaInstallResult: {
      return verifier.VerifyField<OpenShock::Serialization::OtaInstallResult>(static_cast<const uint8_t *>(obj), 0, 1);
    }
    default: return true;
  }
}

inline bool VerifyDeviceToServerMessagePayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<DeviceToServerMessagePayload> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyDeviceToServerMessagePayload(
        verifier,  values->Get(i), types->GetEnum<DeviceToServerMessagePayload>(i))) {
      return false;
    }
  }
  return true;
}

inline const OpenShock::Serialization::DeviceToServerMessage *GetDeviceToServerMessage(const void *buf) {
  return ::flatbuffers::GetRoot<OpenShock::Serialization::DeviceToServerMessage>(buf);
}

inline const OpenShock::Serialization::DeviceToServerMessage *GetSizePrefixedDeviceToServerMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<OpenShock::Serialization::DeviceToServerMessage>(buf);
}

inline bool VerifyDeviceToServerMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OpenShock::Serialization::DeviceToServerMessage>(nullptr);
}

inline bool VerifySizePrefixedDeviceToServerMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OpenShock::Serialization::DeviceToServerMessage>(nullptr);
}

inline void FinishDeviceToServerMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OpenShock::Serialization::DeviceToServerMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDeviceToServerMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OpenShock::Serialization::DeviceToServerMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Serialization
}  // namespace OpenShock

#endif  // FLATBUFFERS_GENERATED_DEVICETOSERVERMESSAGE_OPENSHOCK_SERIALIZATION_H_
