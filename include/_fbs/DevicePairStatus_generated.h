// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DEVICEPAIRSTATUS_OPENSHOCK_SERIALIZATION_TYPES_H_
#define FLATBUFFERS_GENERATED_DEVICEPAIRSTATUS_OPENSHOCK_SERIALIZATION_TYPES_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace OpenShock {
namespace Serialization {
namespace Types {

enum class DevicePairStatus : uint8_t {
  Unpaired = 0,
  Pairing = 1,
  Paired = 2,
  PairingFailed = 3,
  MIN = Unpaired,
  MAX = PairingFailed
};

inline const DevicePairStatus (&EnumValuesDevicePairStatus())[4] {
  static const DevicePairStatus values[] = {
    DevicePairStatus::Unpaired,
    DevicePairStatus::Pairing,
    DevicePairStatus::Paired,
    DevicePairStatus::PairingFailed
  };
  return values;
}

inline const char * const *EnumNamesDevicePairStatus() {
  static const char * const names[5] = {
    "Unpaired",
    "Pairing",
    "Paired",
    "PairingFailed",
    nullptr
  };
  return names;
}

inline const char *EnumNameDevicePairStatus(DevicePairStatus e) {
  if (::flatbuffers::IsOutRange(e, DevicePairStatus::Unpaired, DevicePairStatus::PairingFailed)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDevicePairStatus()[index];
}

}  // namespace Types
}  // namespace Serialization
}  // namespace OpenShock

#endif  // FLATBUFFERS_GENERATED_DEVICEPAIRSTATUS_OPENSHOCK_SERIALIZATION_TYPES_H_
