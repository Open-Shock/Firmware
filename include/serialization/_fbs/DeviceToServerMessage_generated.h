// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DEVICETOSERVERMESSAGE_OPENSHOCK_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_DEVICETOSERVERMESSAGE_OPENSHOCK_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "SemVer_generated.h"

namespace OpenShock {
namespace Serialization {

struct KeepAlive;

struct OtaInstallStarted;
struct OtaInstallStartedBuilder;

struct OtaInstallProgress;
struct OtaInstallProgressBuilder;

struct OtaInstallFailed;
struct OtaInstallFailedBuilder;

struct OtaInstallSucceeded;
struct OtaInstallSucceededBuilder;

struct DeviceToServerMessage;
struct DeviceToServerMessageBuilder;

enum class DeviceToServerMessagePayload : uint8_t {
  NONE = 0,
  KeepAlive = 1,
  OtaInstallStarted = 2,
  OtaInstallProgress = 3,
  OtaInstallFailed = 4,
  OtaInstallSucceeded = 5,
  MIN = NONE,
  MAX = OtaInstallSucceeded
};

inline const DeviceToServerMessagePayload (&EnumValuesDeviceToServerMessagePayload())[6] {
  static const DeviceToServerMessagePayload values[] = {
    DeviceToServerMessagePayload::NONE,
    DeviceToServerMessagePayload::KeepAlive,
    DeviceToServerMessagePayload::OtaInstallStarted,
    DeviceToServerMessagePayload::OtaInstallProgress,
    DeviceToServerMessagePayload::OtaInstallFailed,
    DeviceToServerMessagePayload::OtaInstallSucceeded
  };
  return values;
}

inline const char * const *EnumNamesDeviceToServerMessagePayload() {
  static const char * const names[7] = {
    "NONE",
    "KeepAlive",
    "OtaInstallStarted",
    "OtaInstallProgress",
    "OtaInstallFailed",
    "OtaInstallSucceeded",
    nullptr
  };
  return names;
}

inline const char *EnumNameDeviceToServerMessagePayload(DeviceToServerMessagePayload e) {
  if (::flatbuffers::IsOutRange(e, DeviceToServerMessagePayload::NONE, DeviceToServerMessagePayload::OtaInstallSucceeded)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDeviceToServerMessagePayload()[index];
}

template<typename T> struct DeviceToServerMessagePayloadTraits {
  static const DeviceToServerMessagePayload enum_value = DeviceToServerMessagePayload::NONE;
};

template<> struct DeviceToServerMessagePayloadTraits<OpenShock::Serialization::KeepAlive> {
  static const DeviceToServerMessagePayload enum_value = DeviceToServerMessagePayload::KeepAlive;
};

template<> struct DeviceToServerMessagePayloadTraits<OpenShock::Serialization::OtaInstallStarted> {
  static const DeviceToServerMessagePayload enum_value = DeviceToServerMessagePayload::OtaInstallStarted;
};

template<> struct DeviceToServerMessagePayloadTraits<OpenShock::Serialization::OtaInstallProgress> {
  static const DeviceToServerMessagePayload enum_value = DeviceToServerMessagePayload::OtaInstallProgress;
};

template<> struct DeviceToServerMessagePayloadTraits<OpenShock::Serialization::OtaInstallFailed> {
  static const DeviceToServerMessagePayload enum_value = DeviceToServerMessagePayload::OtaInstallFailed;
};

template<> struct DeviceToServerMessagePayloadTraits<OpenShock::Serialization::OtaInstallSucceeded> {
  static const DeviceToServerMessagePayload enum_value = DeviceToServerMessagePayload::OtaInstallSucceeded;
};

bool VerifyDeviceToServerMessagePayload(::flatbuffers::Verifier &verifier, const void *obj, DeviceToServerMessagePayload type);
bool VerifyDeviceToServerMessagePayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<DeviceToServerMessagePayload> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) KeepAlive FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t uptime_;

 public:
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.KeepAlive";
  }
  KeepAlive()
      : uptime_(0) {
  }
  KeepAlive(uint64_t _uptime)
      : uptime_(::flatbuffers::EndianScalar(_uptime)) {
  }
  uint64_t uptime() const {
    return ::flatbuffers::EndianScalar(uptime_);
  }
};
FLATBUFFERS_STRUCT_END(KeepAlive, 8);

struct KeepAlive::Traits {
  using type = KeepAlive;
};

struct OtaInstallStarted FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OtaInstallStartedBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.OtaInstallStarted";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4
  };
  const OpenShock::SemVer *version() const {
    return GetPointer<const OpenShock::SemVer *>(VT_VERSION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.VerifyTable(version()) &&
           verifier.EndTable();
  }
};

struct OtaInstallStartedBuilder {
  typedef OtaInstallStarted Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_version(::flatbuffers::Offset<OpenShock::SemVer> version) {
    fbb_.AddOffset(OtaInstallStarted::VT_VERSION, version);
  }
  explicit OtaInstallStartedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OtaInstallStarted> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OtaInstallStarted>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OtaInstallStarted> CreateOtaInstallStarted(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<OpenShock::SemVer> version = 0) {
  OtaInstallStartedBuilder builder_(_fbb);
  builder_.add_version(version);
  return builder_.Finish();
}

struct OtaInstallStarted::Traits {
  using type = OtaInstallStarted;
  static auto constexpr Create = CreateOtaInstallStarted;
};

struct OtaInstallProgress FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OtaInstallProgressBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.OtaInstallProgress";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TASK = 4,
    VT_PROGRESS = 6
  };
  const ::flatbuffers::String *task() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TASK);
  }
  float progress() const {
    return GetField<float>(VT_PROGRESS, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TASK) &&
           verifier.VerifyString(task()) &&
           VerifyField<float>(verifier, VT_PROGRESS, 4) &&
           verifier.EndTable();
  }
};

struct OtaInstallProgressBuilder {
  typedef OtaInstallProgress Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_task(::flatbuffers::Offset<::flatbuffers::String> task) {
    fbb_.AddOffset(OtaInstallProgress::VT_TASK, task);
  }
  void add_progress(float progress) {
    fbb_.AddElement<float>(OtaInstallProgress::VT_PROGRESS, progress, 0.0f);
  }
  explicit OtaInstallProgressBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OtaInstallProgress> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OtaInstallProgress>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OtaInstallProgress> CreateOtaInstallProgress(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> task = 0,
    float progress = 0.0f) {
  OtaInstallProgressBuilder builder_(_fbb);
  builder_.add_progress(progress);
  builder_.add_task(task);
  return builder_.Finish();
}

struct OtaInstallProgress::Traits {
  using type = OtaInstallProgress;
  static auto constexpr Create = CreateOtaInstallProgress;
};

inline ::flatbuffers::Offset<OtaInstallProgress> CreateOtaInstallProgressDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *task = nullptr,
    float progress = 0.0f) {
  auto task__ = task ? _fbb.CreateString(task) : 0;
  return OpenShock::Serialization::CreateOtaInstallProgress(
      _fbb,
      task__,
      progress);
}

struct OtaInstallFailed FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OtaInstallFailedBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.OtaInstallFailed";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BRICKED = 4,
    VT_MESSAGE = 6
  };
  bool bricked() const {
    return GetField<uint8_t>(VT_BRICKED, 0) != 0;
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_BRICKED, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct OtaInstallFailedBuilder {
  typedef OtaInstallFailed Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_bricked(bool bricked) {
    fbb_.AddElement<uint8_t>(OtaInstallFailed::VT_BRICKED, static_cast<uint8_t>(bricked), 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(OtaInstallFailed::VT_MESSAGE, message);
  }
  explicit OtaInstallFailedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OtaInstallFailed> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OtaInstallFailed>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OtaInstallFailed> CreateOtaInstallFailed(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool bricked = false,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  OtaInstallFailedBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_bricked(bricked);
  return builder_.Finish();
}

struct OtaInstallFailed::Traits {
  using type = OtaInstallFailed;
  static auto constexpr Create = CreateOtaInstallFailed;
};

inline ::flatbuffers::Offset<OtaInstallFailed> CreateOtaInstallFailedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool bricked = false,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return OpenShock::Serialization::CreateOtaInstallFailed(
      _fbb,
      bricked,
      message__);
}

struct OtaInstallSucceeded FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OtaInstallSucceededBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.OtaInstallSucceeded";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4
  };
  const OpenShock::SemVer *version() const {
    return GetPointer<const OpenShock::SemVer *>(VT_VERSION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.VerifyTable(version()) &&
           verifier.EndTable();
  }
};

struct OtaInstallSucceededBuilder {
  typedef OtaInstallSucceeded Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_version(::flatbuffers::Offset<OpenShock::SemVer> version) {
    fbb_.AddOffset(OtaInstallSucceeded::VT_VERSION, version);
  }
  explicit OtaInstallSucceededBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OtaInstallSucceeded> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OtaInstallSucceeded>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OtaInstallSucceeded> CreateOtaInstallSucceeded(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<OpenShock::SemVer> version = 0) {
  OtaInstallSucceededBuilder builder_(_fbb);
  builder_.add_version(version);
  return builder_.Finish();
}

struct OtaInstallSucceeded::Traits {
  using type = OtaInstallSucceeded;
  static auto constexpr Create = CreateOtaInstallSucceeded;
};

struct DeviceToServerMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DeviceToServerMessageBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.DeviceToServerMessage";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD_TYPE = 4,
    VT_PAYLOAD = 6
  };
  OpenShock::Serialization::DeviceToServerMessagePayload payload_type() const {
    return static_cast<OpenShock::Serialization::DeviceToServerMessagePayload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const OpenShock::Serialization::KeepAlive *payload_as_KeepAlive() const {
    return payload_type() == OpenShock::Serialization::DeviceToServerMessagePayload::KeepAlive ? static_cast<const OpenShock::Serialization::KeepAlive *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::OtaInstallStarted *payload_as_OtaInstallStarted() const {
    return payload_type() == OpenShock::Serialization::DeviceToServerMessagePayload::OtaInstallStarted ? static_cast<const OpenShock::Serialization::OtaInstallStarted *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::OtaInstallProgress *payload_as_OtaInstallProgress() const {
    return payload_type() == OpenShock::Serialization::DeviceToServerMessagePayload::OtaInstallProgress ? static_cast<const OpenShock::Serialization::OtaInstallProgress *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::OtaInstallFailed *payload_as_OtaInstallFailed() const {
    return payload_type() == OpenShock::Serialization::DeviceToServerMessagePayload::OtaInstallFailed ? static_cast<const OpenShock::Serialization::OtaInstallFailed *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::OtaInstallSucceeded *payload_as_OtaInstallSucceeded() const {
    return payload_type() == OpenShock::Serialization::DeviceToServerMessagePayload::OtaInstallSucceeded ? static_cast<const OpenShock::Serialization::OtaInstallSucceeded *>(payload()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyDeviceToServerMessagePayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const OpenShock::Serialization::KeepAlive *DeviceToServerMessage::payload_as<OpenShock::Serialization::KeepAlive>() const {
  return payload_as_KeepAlive();
}

template<> inline const OpenShock::Serialization::OtaInstallStarted *DeviceToServerMessage::payload_as<OpenShock::Serialization::OtaInstallStarted>() const {
  return payload_as_OtaInstallStarted();
}

template<> inline const OpenShock::Serialization::OtaInstallProgress *DeviceToServerMessage::payload_as<OpenShock::Serialization::OtaInstallProgress>() const {
  return payload_as_OtaInstallProgress();
}

template<> inline const OpenShock::Serialization::OtaInstallFailed *DeviceToServerMessage::payload_as<OpenShock::Serialization::OtaInstallFailed>() const {
  return payload_as_OtaInstallFailed();
}

template<> inline const OpenShock::Serialization::OtaInstallSucceeded *DeviceToServerMessage::payload_as<OpenShock::Serialization::OtaInstallSucceeded>() const {
  return payload_as_OtaInstallSucceeded();
}

struct DeviceToServerMessageBuilder {
  typedef DeviceToServerMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_payload_type(OpenShock::Serialization::DeviceToServerMessagePayload payload_type) {
    fbb_.AddElement<uint8_t>(DeviceToServerMessage::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(DeviceToServerMessage::VT_PAYLOAD, payload);
  }
  explicit DeviceToServerMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DeviceToServerMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DeviceToServerMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DeviceToServerMessage> CreateDeviceToServerMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    OpenShock::Serialization::DeviceToServerMessagePayload payload_type = OpenShock::Serialization::DeviceToServerMessagePayload::NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  DeviceToServerMessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

struct DeviceToServerMessage::Traits {
  using type = DeviceToServerMessage;
  static auto constexpr Create = CreateDeviceToServerMessage;
};

inline bool VerifyDeviceToServerMessagePayload(::flatbuffers::Verifier &verifier, const void *obj, DeviceToServerMessagePayload type) {
  switch (type) {
    case DeviceToServerMessagePayload::NONE: {
      return true;
    }
    case DeviceToServerMessagePayload::KeepAlive: {
      return verifier.VerifyField<OpenShock::Serialization::KeepAlive>(static_cast<const uint8_t *>(obj), 0, 8);
    }
    case DeviceToServerMessagePayload::OtaInstallStarted: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::OtaInstallStarted *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DeviceToServerMessagePayload::OtaInstallProgress: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::OtaInstallProgress *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DeviceToServerMessagePayload::OtaInstallFailed: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::OtaInstallFailed *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DeviceToServerMessagePayload::OtaInstallSucceeded: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::OtaInstallSucceeded *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyDeviceToServerMessagePayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<DeviceToServerMessagePayload> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyDeviceToServerMessagePayload(
        verifier,  values->Get(i), types->GetEnum<DeviceToServerMessagePayload>(i))) {
      return false;
    }
  }
  return true;
}

inline const OpenShock::Serialization::DeviceToServerMessage *GetDeviceToServerMessage(const void *buf) {
  return ::flatbuffers::GetRoot<OpenShock::Serialization::DeviceToServerMessage>(buf);
}

inline const OpenShock::Serialization::DeviceToServerMessage *GetSizePrefixedDeviceToServerMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<OpenShock::Serialization::DeviceToServerMessage>(buf);
}

inline bool VerifyDeviceToServerMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OpenShock::Serialization::DeviceToServerMessage>(nullptr);
}

inline bool VerifySizePrefixedDeviceToServerMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OpenShock::Serialization::DeviceToServerMessage>(nullptr);
}

inline void FinishDeviceToServerMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OpenShock::Serialization::DeviceToServerMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDeviceToServerMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OpenShock::Serialization::DeviceToServerMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Serialization
}  // namespace OpenShock

#endif  // FLATBUFFERS_GENERATED_DEVICETOSERVERMESSAGE_OPENSHOCK_SERIALIZATION_H_
