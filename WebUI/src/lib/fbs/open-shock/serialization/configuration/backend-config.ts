// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class BackendConfig {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BackendConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBackendConfig(bb:flatbuffers.ByteBuffer, obj?:BackendConfig):BackendConfig {
  return (obj || new BackendConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBackendConfig(bb:flatbuffers.ByteBuffer, obj?:BackendConfig):BackendConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BackendConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

host():string|null
host(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
host(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

authToken():string|null
authToken(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
authToken(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startBackendConfig(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addHost(builder:flatbuffers.Builder, hostOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, hostOffset, 0);
}

static addAuthToken(builder:flatbuffers.Builder, authTokenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, authTokenOffset, 0);
}

static endBackendConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBackendConfig(builder:flatbuffers.Builder, hostOffset:flatbuffers.Offset, authTokenOffset:flatbuffers.Offset):flatbuffers.Offset {
  BackendConfig.startBackendConfig(builder);
  BackendConfig.addHost(builder, hostOffset);
  BackendConfig.addAuthToken(builder, authTokenOffset);
  return BackendConfig.endBackendConfig(builder);
}
}
