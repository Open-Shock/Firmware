// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ServerMessagePayload, unionToServerMessagePayload, unionListToServerMessagePayload } from '../../open-shock/serialization/server-message-payload.js';


export class ServerMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ServerMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsServerMessage(bb:flatbuffers.ByteBuffer, obj?:ServerMessage):ServerMessage {
  return (obj || new ServerMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsServerMessage(bb:flatbuffers.ByteBuffer, obj?:ServerMessage):ServerMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ServerMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

payloadType():ServerMessagePayload {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ServerMessagePayload.NONE;
}

payload<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startServerMessage(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPayloadType(builder:flatbuffers.Builder, payloadType:ServerMessagePayload) {
  builder.addFieldInt8(0, payloadType, ServerMessagePayload.NONE);
}

static addPayload(builder:flatbuffers.Builder, payloadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, payloadOffset, 0);
}

static endServerMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishServerMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedServerMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createServerMessage(builder:flatbuffers.Builder, payloadType:ServerMessagePayload, payloadOffset:flatbuffers.Offset):flatbuffers.Offset {
  ServerMessage.startServerMessage(builder);
  ServerMessage.addPayloadType(builder, payloadType);
  ServerMessage.addPayload(builder, payloadOffset);
  return ServerMessage.endServerMessage(builder);
}
}
