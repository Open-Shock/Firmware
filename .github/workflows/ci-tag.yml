on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-*'
  workflow_dispatch:

name: ci-tag
run-name: 'ci-tag: ${{ github.ref_name }}'

env:
  NODE_VERSION: 18
  PYTHON_VERSION: 3.12
  OPENSHOCK_API_DOMAIN: api.shocklink.net
  # OPENSHOCK_FW_VERSION:
  #   - Since this is a tag push, we can use ref_name to get the tag name.
  OPENSHOCK_FW_VERSION: ${{ github.ref_name }}
  OPENSHOCK_FW_COMMIT: ${{ github.sha }}

jobs:
  # Read platformio.ini and extract all specific targets. See the referenced file for more info.
  get-targets:
    uses: ./.github/workflows/get-targets.yml

  build-captive-portal:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github
            WebUI

      - uses: ./.github/actions/build-captive-portal
        with:
          node-version: ${{ env.NODE_VERSION }}
          skip-checkout: true

  build-filesystem:
    runs-on: ubuntu-latest
    needs: build-captive-portal

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/build-filesystem
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          skip-checkout: true

  build-firmware:
    runs-on: ubuntu-latest
    needs: get-targets
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.get-targets.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/build-firmware
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          board: ${{ matrix.board }}
          skip-checkout: true

  merge-images:
    runs-on: ubuntu-latest
    needs: [get-targets, build-filesystem, build-firmware]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.get-targets.outputs.matrix )}}

    steps:
      - uses: actions/checkout@v4
        with:
          path: .
          sparse-checkout: |
            .github
            scripts
            boards
            chips

      - name: Merge images
        uses: ./.github/actions/merge-images
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          board: ${{ matrix.board }}
          skip-checkout: true

  checkpoint-build:
    runs-on: ubuntu-latest
    needs: [build-filesystem, merge-images]
    steps:
      - run: echo "Builds checkpoint reached"

  cdn-upload-boards:
    runs-on: ubuntu-latest
    needs: [get-targets, checkpoint-build]
    environment: cdn-firmware-r2
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.get-targets.outputs.matrix )}}

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github

      # Set up rclone for CDN uploads.
      - uses: ./.github/actions/cdn-prepare
        with:
          cf-account-id: ${{ vars.S3_ACCOUNT_ID }}
          cf-access-key-id: ${{ vars.S3_ACCESS_KEY_ID }}
          cf-secret-access-key: ${{ secrets.S3_SECRET_ACCESS_KEY }}

      # Upload firmware to CDN.
      - uses: ./.github/actions/cdn-upload-board
        with:
          cf-bucket: ${{ vars.S3_BUCKET }}
          board: ${{ matrix.board }}
          version: ${{ github.ref_name }}
          release-channel: ${{ contains(github.ref_name, '-') && 'stable' || 'beta' }}

  cdn-upload-board-list:
    runs-on: ubuntu-latest
    needs: [get-targets, checkpoint-build]
    environment: cdn-firmware-r2

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github

      # Set up rclone for CDN uploads.
      - uses: ./.github/actions/cdn-prepare
        with:
          cf-account-id: ${{ vars.S3_ACCOUNT_ID }}
          cf-access-key-id: ${{ vars.S3_ACCESS_KEY_ID }}
          cf-secret-access-key: ${{ secrets.S3_SECRET_ACCESS_KEY }}

      # Upload firmware to CDN.
      - uses: ./.github/actions/cdn-upload-version-info
        with:
          cf-bucket: ${{ vars.S3_BUCKET }}
          version: ${{ github.ref_name }}
          boards: ${{ needs.get-targets.outputs.board-list }}

  cdn-bump-version:
    runs-on: ubuntu-latest
    needs: [cdn-upload-boards] # only after version is complete
    environment: cdn-firmware-r2

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github

      # Set up rclone for CDN uploads.
      - uses: ./.github/actions/cdn-prepare
        with:
          cf-account-id: ${{ vars.S3_ACCOUNT_ID }}
          cf-access-key-id: ${{ vars.S3_ACCESS_KEY_ID }}
          cf-secret-access-key: ${{ secrets.S3_SECRET_ACCESS_KEY }}

      # Upload firmware to CDN.
      - uses: ./.github/actions/cdn-bump-version
        with:
          cf-bucket: ${{ vars.S3_BUCKET }}
          version: ${{ github.ref_name }}
          release-channel: ${{ !contains(github.ref_name, '-') && 'stable' || 'beta' }}

  checkpoint-cdn:
    runs-on: ubuntu-latest
    needs: [checkpoint-build, cdn-upload-boards, cdn-upload-board-list, cdn-bump-version]
    steps:
      - run: echo "CDN checkpoint reached"

  release:
    runs-on: ubuntu-latest
    needs: [checkpoint-cdn]

    steps:
      - name: Download release notes
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            RELEASE.md

      - name: Download release artifacts
        uses: actions/download-artifact@v4

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: '**/OpenShock_*.bin'
          tag: ${{ github.ref_name }}
          prerelease: ${{ contains(github.ref_name, '-') }}
          artifactErrorsFailBuild: true
          bodyFile: RELEASE.md
